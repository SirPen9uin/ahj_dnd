!function(){"use strict";class e{constructor(){this.data={todo:[],"in-progress":[],done:[]}}addDataItem(e,t){this.data[e].push({id:"card-"+Date.now(),title:t})}deleteDataItem(e,t){const o=this.data[e].findIndex((e=>e.id===t));this.data[e].splice(o,1)}loadData(){localStorage.getItem("trello-state")&&(this.data=JSON.parse(localStorage.getItem("trello-state")))}moveDataItem(e,t){t&&[this.data.todo,this.data["in-progress"],this.data.done].forEach((o=>{const r=o.findIndex((t=>t.id===e.dataset.id));if(-1!==r){const e=o[r];if(o.splice(r,1),t.cardId){const o=this.data[t.columnName].findIndex((e=>e.id===t.cardId));this.data[t.columnName].splice(o,0,e)}else this.data[t.columnName].push(e)}}))}saveData(){localStorage.setItem("trello-state",JSON.stringify(this.data))}}class t{constructor(){this._activeForm=void 0,this._board=void 0,this._cloneCard=void 0,this._container=void 0,this._draggableCard=void 0,this._draggableCardId=void 0,this._element=void 0,this._ghostCard=void 0,this._shiftCardByX=void 0,this._shiftCardByY=void 0,this._state=new e,this.onClick=this.onClick.bind(this),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseLeave=this.onMouseLeave.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.onMouseUp=this.onMouseUp.bind(this)}addEventListeners(){this._container.addEventListener("click",this.onClick),this._container.addEventListener("mousedown",this.onMouseDown),this._container.addEventListener("mouseup",this.onMouseUp),this._element.addEventListener("mouseleave",this.onMouseLeave)}addGhostCard(e){this._ghostCard.hidden=!0;const o=document.elementFromPoint(e.clientX,e.clientY);if(this._ghostCard.hidden=!1,!o)return;const r=o.closest(t.columnCardSelector);if(this._cloneCard=this._draggableCard.cloneNode(!0),this._cloneCard.dataset.id="card-clone",o.closest(t.columnBodySelector))if(o.closest(t.columnBodySelector).hasChildNodes())if(r&&r.dataset.id!==this._draggableCardId){const{top:l}=o.getBoundingClientRect();r.previousElementSibling&&r.previousElementSibling.dataset.id===this._draggableCardId&&o.closest(t.columnBodySelector).insertBefore(this._cloneCard,o.closest(t.columnCardSelector).nextElementSibling),r.nextElementSibling&&r.nextElementSibling.dataset.id===this._draggableCardId&&o.closest(t.columnBodySelector).insertBefore(this._cloneCard,o.closest(t.columnCardSelector)),e.pageY>window.scrollY+l+o.closest(t.columnCardSelector).offsetHeight/2?o.closest(t.columnBodySelector).insertBefore(this._cloneCard,o.closest(t.columnCardSelector).nextElementSibling):o.closest(t.columnBodySelector).insertBefore(this._cloneCard,o.closest(t.columnCardSelector))}else{const r=document.elementFromPoint(e.clientX,e.clientY-30);document.elementFromPoint(e.clientX,e.clientY+40).closest(t.columnFooterSelector)?o.closest(t.columnBodySelector).appendChild(this._cloneCard):r.closest(t.columnHeaderSelector)&&o.closest(t.columnBodySelector).prepend(this._cloneCard)}else o.closest(t.columnBodySelector).appendChild(this._cloneCard);if(o.closest(t.columnFooterSelector)){const e=o.closest(t.boardColumnSelector).querySelector(t.columnBodySelector);e.scrollTop=e.scrollHeight,e.appendChild(this._cloneCard)}o.closest(t.columnHeaderSelector)&&o.closest(t.boardColumnSelector).querySelector(t.columnBodySelector).prepend(this._cloneCard)}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this._container=e}checkBinding(){if(void 0===this._container)throw new Error("Trello not bind to DOM")}drawUI(){this.checkBinding(),this._container.innerHTML=t.markup,this._element=this._container.querySelector(t.selector),this._board=this._element.querySelector(t.boardSelector),this._state.loadData(),this.redrawDOM()}onClick(e){if(e.target.closest(t.cardBtnDeleteSelector))return this.onClickCardBtnDelete(e);if(e.target.closest(t.columnBtnAddSelector))this.onClickColumnBtnAdd(e);else if(e.target.closest(t.formBtnResetSelector))this.onResetForm(e);else if(e.target.closest(t.formBtnSubmitSelector))return this.onSubmitForm(e)}onClickCardBtnDelete(e){const o=e.target.closest(t.columnCardSelector).dataset.id,r=e.target.closest(t.columnBodySelector);this._state.deleteDataItem(r.dataset.name,o),this.redrawColumnBody(r),this._state.saveData()}onClickColumnBtnAdd(e){[...this._container.querySelectorAll(t.columnFooterSelector)].forEach((e=>{e.querySelector(t.columnBtnAddSelector).classList.remove("hidden"),e.querySelector(t.columnFormSelector).classList.add("hidden")}));const o=e.target.closest(t.boardColumnSelector),r=e.target.closest(t.columnFooterSelector);this._activeForm=r.querySelector(t.columnFormSelector),e.target.classList.add("hidden"),this._activeForm.classList.remove("hidden"),this._activeForm.querySelector(t.formTextareaSelector).focus(),o.querySelector(t.columnBodySelector).style.maxHeight=this._board.offsetHeight-o.querySelector(t.columnHeaderSelector).offsetHeight-r.offsetHeight+"px"}onMouseDown(e){e.preventDefault();const o=e.target.closest(t.columnCardSelector);if(!o||e.target.closest(t.cardBtnDeleteSelector))return;document.body.style.cursor="grabbing",this._draggableCard=o,this._draggableCardId=this._draggableCard.id;const r=this._draggableCard.getBoundingClientRect();this._shiftCardByX=e.clientX-r.left,this._shiftCardByY=e.clientY-r.top,this._ghostCard=this._draggableCard.cloneNode(!0),this._ghostCard.classList.add("draggable"),this._ghostCard.dataset.id="card-ghost",this._draggableCard.classList.add("darkened"),document.querySelector(t.selector).appendChild(this._ghostCard),this._ghostCard.style.width=`${this._draggableCard.offsetWidth}px`,this._ghostCard.style.left=`${r.left}px`,this._ghostCard.style.top=`${r.top}px`,this._container.addEventListener("mousemove",this.onMouseMove)}onMouseLeave(){this._draggableCard&&(this._draggableCard.classList.remove("darkened"),this._ghostCard.remove(),document.body.style.cursor="auto",this._container.removeEventListener("mousemove",this.onMouseMove))}onMouseMove(e){e.preventDefault(),document.querySelector('[data-id="card-clone"]')&&document.querySelector('[data-id="card-clone"]').remove(),this._draggableCard&&(this._ghostCard.style.left=e.pageX-this._shiftCardByX+"px",this._ghostCard.style.top=e.pageY-this._shiftCardByY+"px",this.addGhostCard(e))}onMouseUp(e){const o=document.elementFromPoint(e.clientX,e.clientY);if(!this._draggableCard||o.closest(t.cardBtnDeleteSelector))return;let r;this._cloneCard&&(o.closest(t.columnBodySelector)||o.closest(t.columnFooterSelector)||o.closest(t.columnHeaderSelector))?this._cloneCard.nextElementSibling?r={cardId:this._cloneCard.nextElementSibling.dataset.id,columnName:this._cloneCard.closest(t.columnBodySelector).dataset.name}:o.closest(".darkened")&&(r=o.closest(t.columnCardSelector).nextElementSibling?{cardId:o.closest(t.columnCardSelector).nextElementSibling.dataset.id,columnName:o.closest(t.columnBodySelector).dataset.name}:{cardId:void 0,columnName:o.closest(t.columnBodySelector).dataset.name}):r=void 0,this._container.removeEventListener("mousemove",this.onMouseMove),this._state.moveDataItem(this._draggableCard,r),this.redrawDOM(),this._state.saveData()}onResetForm(e){const o=e.target.closest(t.boardColumnSelector),r=e.target.closest(t.columnFooterSelector);r.querySelector(t.columnBtnAddSelector).classList.remove("hidden"),this._activeForm.classList.add("hidden"),this._activeForm.querySelector(t.formTextareaSelector).value="",o.querySelector(t.columnBodySelector).style.maxHeight=this._board.offsetHeight-o.querySelector(t.columnHeaderSelector).offsetHeight-r.offsetHeight+"px",this._activeForm=void 0}onSubmitForm(e){e.preventDefault();const o=this._activeForm.querySelector(t.formTextareaSelector),r=o.value;if(r){const l=e.target.closest(t.boardColumnSelector).querySelector(t.columnBodySelector);this._state.addDataItem(l.dataset.name,r),this.redrawColumnBody(l),e.target.closest(t.columnFooterSelector).querySelector(t.columnBtnAddSelector).classList.remove("hidden"),this._activeForm.classList.add("hidden"),o.value="",this._state.saveData(),this._activeForm=void 0}}redrawColumnBody(e){const o=e.closest(t.boardColumnSelector);e.innerHTML="",e.style.maxHeight=this._board.offsetHeight-o.querySelector(t.columnHeaderSelector).offsetHeight-o.querySelector(t.columnFooterSelector).offsetHeight+"px",this._state.data[e.dataset.name].forEach((o=>{e.insertAdjacentHTML("beforeend",t.markupCard(o.id,o.title))}))}redrawDOM(){document.querySelector('[data-id="card-ghost"]')&&document.querySelector('[data-id="card-ghost"]').remove(),document.querySelector('[data-id="card-clone"]')&&document.querySelector('[data-id="card-clone"]').remove(),this.redrawColumnBody(this._container.querySelector('[data-name="todo"]')),this.redrawColumnBody(this._container.querySelector('[data-name="in-progress"]')),this.redrawColumnBody(this._container.querySelector('[data-name="done"]')),document.body.style.cursor="auto"}static get markup(){return'\n      <div class="trello">\n        <div class="trello__board trello-board">\n    '+t.markupColumn("todo","TODO")+t.markupColumn("in-progress","IN PROGRESS")+t.markupColumn("done","DONE")+"\n        </div>\n      </div>\n    "}static markupCard(e,t){return`\n      <article class="trello-column__card trello-card" data-id="${e}">\n        <h3 class="trello-card__title">${t}</h3>\n        <button class="trello-card__btn-delete">&#10006;</button>\n      </article>\n    `}static markupColumn(e,t){return`\n      <section class="trello-board__column trello-column">\n        <div class="trello-column__header">\n          <h2 class="trello-column__title">${t}</h2>\n        </div>\n        <div class="trello-column__body" data-name="${e}"></div>\n        <div class="trello-column__footer">\n          <button class="trello-column__btn-add">&#10010; Add another card</button>\n          <form class="trello-column__form trello-form hidden">\n            <textarea class="trello-form__textarea" placeholder="Enter a title for this card..."></textarea>\n            <div class="trello-form__controls">\n              <button class="trello-form__btn-submit" type="submit">Add Card</button>\n              <button class="trello-form__btn-reset" type="reset">&#10006;</button>\n            </div>\n          </form>\n        </div>\n      </section>\n    `}static get boardColumnSelector(){return".trello-board__column"}static get boardSelector(){return".trello__board"}static get cardBtnDeleteSelector(){return".trello-card__btn-delete"}static get columnBtnAddSelector(){return".trello-column__btn-add"}static get columnBodySelector(){return".trello-column__body"}static get columnCardSelector(){return".trello-column__card"}static get columnFooterSelector(){return".trello-column__footer"}static get columnFormSelector(){return".trello-column__form"}static get columnHeaderSelector(){return".trello-column__header"}static get formBtnResetSelector(){return".trello-form__btn-reset"}static get formBtnSubmitSelector(){return".trello-form__btn-submit"}static get formTextareaSelector(){return".trello-form__textarea"}static get selector(){return".trello"}}document.addEventListener("DOMContentLoaded",(()=>{const e=document.querySelector("#app"),o=new t;o.bindToDOM(e),o.drawUI(),o.addEventListeners()}))}();